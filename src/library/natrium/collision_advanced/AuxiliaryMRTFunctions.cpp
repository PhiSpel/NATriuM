#include "AuxiliaryMRTFunctions.h"

#include <array>
using std::array;

namespace natrium {
namespace AuxiliaryMRTFunctions {

// =====================================================================================
// ========================= (DELLAR D2Q9) =============================================
// =====================================================================================

// Moment names: ['rho', 'jx', 'jy', 'Pi_xx', 'Pi_xy', 'PI_yy', 'N', 'Jx', 'Jy']
const array<array<double, 9>, 9> MRTDellarD2Q9::moment_trafo = { {
		{ { 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1.
				/ 1., 1. / 1. } }, { { 0. / 1., 1. / 1., 0. / 1., -1. / 1., 0.
				/ 1., 1. / 1., -1. / 1., -1. / 1., 1. / 1. } }, { { 0. / 1., 0.
				/ 1., 1. / 1., 0. / 1., -1. / 1., 1. / 1., 1. / 1., -1. / 1.,
				-1. / 1. } }, { { -3. / 2., 3. / 1., -3. / 2., 3. / 1., -3.
				/ 2., 3. / 1., 3. / 1., 3. / 1., 3. / 1. } }, { { 0. / 1., 0.
				/ 1., -0. / 1., 0. / 1., 0. / 1., 9. / 1., -9. / 1., 9. / 1.,
				-9. / 1. } }, { { -3. / 2., -3. / 2., 3. / 1., -3. / 2., 3.
				/ 1., 3. / 1., 3. / 1., 3. / 1., 3. / 1. } }, { { 1. / 1., -2.
				/ 1., -2. / 1., -2. / 1., -2. / 1., 4. / 1., 4. / 1., 4. / 1.,
				4. / 1. } }, { { -0. / 1., -2. / 1., 0. / 1., 2. / 1., 0. / 1.,
				4. / 1., -4. / 1., -4. / 1., 4. / 1. } }, {
				{ -0. / 1., 0. / 1., -2. / 1., 0. / 1., 2. / 1., 4. / 1., 4.
						/ 1., -4. / 1., -4. / 1. } } } };

const array<array<double, 9>, 9> MRTDellarD2Q9::inverse_trafo = { { { { 4. / 9.,
		0. / 1., 0. / 1., -4. / 27., 0. / 1., -4. / 27., 1. / 9., 0. / 1., 0.
				/ 1. } }, { { 1. / 9., 1. / 3., 0. / 1., 2. / 27., 0. / 1., -1.
		/ 27., -1. / 18., -1. / 12., 0. / 1. } }, { { 1. / 9., 0. / 1., 1. / 3.,
		-1. / 27., 0. / 1., 2. / 27., -1. / 18., 0. / 1., -1. / 12. } }, { { 1.
		/ 9., -1. / 3., 0. / 1., 2. / 27., 0. / 1., -1. / 27., -1. / 18., 1.
		/ 12., 0. / 1. } }, { { 1. / 9., 0. / 1., -1. / 3., -1. / 27., 0. / 1.,
		2. / 27., -1. / 18., 0. / 1., 1. / 12. } }, { { 1. / 36., 1. / 12., 1.
		/ 12., 1. / 54., 1. / 36., 1. / 54., 1. / 36., 1. / 24., 1. / 24. } }, {
		{ 1. / 36., -1. / 12., 1. / 12., 1. / 54., -1. / 36., 1. / 54., 1.
				/ 36., -1. / 24., 1. / 24. } }, { { 1. / 36., -1. / 12., -1.
		/ 12., 1. / 54., 1. / 36., 1. / 54., 1. / 36., -1. / 24., -1. / 24. } },
		{ { 1. / 36., 1. / 12., -1. / 12., 1. / 54., -1. / 36., 1. / 54., 1.
				/ 36., 1. / 24., -1. / 24. } } } };

// =====================================================================================
// ========================= (LALLEMAND D2Q9) ==========================================
// =====================================================================================

// Moment names: ['rho', 'jx', 'jy', 'pxx', 'pxy', 'e', 'qx', 'qy', 'eps']
const array<array<double, 9>, 9> MRTLallemandD2Q9::moment_trafo = { { { { 1.
		/ 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1.
		/ 1. } }, { { 0. / 1., 1. / 1., 0. / 1., -1. / 1., 0. / 1., 1. / 1., -1.
		/ 1., -1. / 1., 1. / 1. } }, { { 0. / 1., 0. / 1., 1. / 1., 0. / 1., -1.
		/ 1., 1. / 1., 1. / 1., -1. / 1., -1. / 1. } }, { { 0. / 1., 1. / 1.,
		-1. / 1., 1. / 1., -1. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1. } }, { {
		0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., 1. / 1., -1. / 1., 1. / 1.,
		-1. / 1. } }, { { -4. / 1., -1. / 1., -1. / 1., -1. / 1., -1. / 1., 2.
		/ 1., 2. / 1., 2. / 1., 2. / 1. } }, { { 0. / 1., -2. / 1., 0. / 1., 2.
		/ 1., 0. / 1., 1. / 1., -1. / 1., -1. / 1., 1. / 1. } },
		{ { 0. / 1., 0. / 1., -2. / 1., 0. / 1., 2. / 1., 1. / 1., 1. / 1., -1.
				/ 1., -1. / 1. } }, { { 4. / 1., -2. / 1., -2. / 1., -2. / 1.,
				-2. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1. } } } };
const array<array<double, 9>, 9> MRTLallemandD2Q9::inverse_trafo = { { { { 1.
		/ 9., 0. / 1., 0. / 1., 0. / 1., 0. / 1., -1. / 9., -0. / 1., 0. / 1.,
		1. / 9. } }, { { 1. / 9., 1. / 6., 0. / 1., 1. / 4., 0. / 1., -1. / 36.,
		-1. / 6., 0. / 1., -1. / 18. } }, { { 1. / 9., 0. / 1., 1. / 6., -1.
		/ 4., 0. / 1., -1. / 36., 0. / 1., -1. / 6., -1. / 18. } }, { { 1. / 9.,
		-1. / 6., 0. / 1., 1. / 4., 0. / 1., -1. / 36., 1. / 6., 0. / 1., -1.
				/ 18. } }, { { 1. / 9., 0. / 1., -1. / 6., -1. / 4., 0. / 1.,
		-1. / 36., 0. / 1., 1. / 6., -1. / 18. } }, { { 1. / 9., 1. / 6., 1.
		/ 6., 0. / 1., 1. / 4., 1. / 18., 1. / 12., 1. / 12., 1. / 36. } }, { {
		1. / 9., -1. / 6., 1. / 6., 0. / 1., -1. / 4., 1. / 18., -1. / 12., 1.
				/ 12., 1. / 36. } }, { { 1. / 9., -1. / 6., -1. / 6., 0. / 1.,
		1. / 4., 1. / 18., -1. / 12., -1. / 12., 1. / 36. } }, { { 1. / 9., 1.
		/ 6., -1. / 6., 0. / 1., -1. / 4., 1. / 18., 1. / 12., -1. / 12., 1.
		/ 36. } } } };

// =====================================================================================
// ========================= (D'HUMIERES D3Q19) ========================================
// =====================================================================================

// Moment names: ['rho', 'e', 'eps', 'jx', 'qx', 'jy', 'qy', 'jz', 'qz', '3pxx', '3pixx', 'pww', 'piww', 'pxy', 'pxz', 'pxx', 'mx', 'my', 'mz']
const array<array<double, 19>, 19> MRTDHumieresD3Q19::moment_trafo = { { { { 1.
		/ 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1.
		/ 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1.
		/ 1., 1. / 1., 1. / 1. } }, { { -30. / 1., -11. / 1., -11. / 1., -11.
		/ 1., -11. / 1., -11. / 1., -11. / 1., 8. / 1., 8. / 1., 8. / 1., 8.
		/ 1., 8. / 1., 8. / 1., 8. / 1., 8. / 1., 8. / 1., 8. / 1., 8. / 1., 8.
		/ 1. } }, { { 12. / 1., -4. / 1., -4. / 1., -4. / 1., -4. / 1., -4.
		/ 1., -4. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1.
		/ 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1. } }, { { 0. / 1., 1.
		/ 1., 0. / 1., -1. / 1., 0. / 1., 0. / 1., 0. / 1., 1. / 1., -1. / 1.,
		-1. / 1., 1. / 1., 1. / 1., 1. / 1., -1. / 1., -1. / 1., 0. / 1., 0.
				/ 1., 0. / 1., 0. / 1. } }, {
		{ 0. / 1., -4. / 1., 0. / 1., 4. / 1., 0. / 1., 0. / 1., 0. / 1., 1.
				/ 1., -1. / 1., -1. / 1., 1. / 1., 1. / 1., 1. / 1., -1. / 1.,
				-1. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1. } }, { { 0. / 1.,
		0. / 1., 0. / 1., 0. / 1., 0. / 1., -1. / 1., 1. / 1., 0. / 1., 0. / 1.,
		0. / 1., 0. / 1., -1. / 1., 1. / 1., 1. / 1., -1. / 1., -1. / 1., 1.
				/ 1., 1. / 1., -1. / 1. } }, { { 0. / 1., 0. / 1., 0. / 1., 0.
		/ 1., 0. / 1., 4. / 1., -4. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1.,
		-1. / 1., 1. / 1., 1. / 1., -1. / 1., -1. / 1., 1. / 1., 1. / 1., -1.
				/ 1. } }, { { 0. / 1., 0. / 1., 1. / 1., 0. / 1., -1. / 1., 0.
		/ 1., 0. / 1., 1. / 1., 1. / 1., -1. / 1., -1. / 1., 0. / 1., 0. / 1.,
		0. / 1., 0. / 1., 1. / 1., 1. / 1., -1. / 1., -1. / 1. } }, { { 0. / 1.,
		0. / 1., -4. / 1., 0. / 1., 4. / 1., 0. / 1., 0. / 1., 1. / 1., 1. / 1.,
		-1. / 1., -1. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., 1. / 1., 1.
				/ 1., -1. / 1., -1. / 1. } }, { { 0. / 1., 2. / 1., -1. / 1., 2.
		/ 1., -1. / 1., -1. / 1., -1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1.,
		1. / 1., 1. / 1., 1. / 1., 1. / 1., -2. / 1., -2. / 1., -2. / 1., -2.
				/ 1. } }, { { 0. / 1., -4. / 1., 2. / 1., -4. / 1., 2. / 1., 2.
		/ 1., 2. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 1.
		/ 1., 1. / 1., -2. / 1., -2. / 1., -2. / 1., -2. / 1. } }, { { 0. / 1.,
		0. / 1., -1. / 1., 0. / 1., -1. / 1., 1. / 1., 1. / 1., -1. / 1., -1.
				/ 1., -1. / 1., -1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 0.
				/ 1., 0. / 1., 0. / 1., 0. / 1. } }, { { 0. / 1., 0. / 1., 2.
		/ 1., 0. / 1., 2. / 1., -2. / 1., -2. / 1., -1. / 1., -1. / 1., -1.
		/ 1., -1. / 1., 1. / 1., 1. / 1., 1. / 1., 1. / 1., 0. / 1., 0. / 1., 0.
		/ 1., 0. / 1. } }, { { 0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., 0.
		/ 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., -1. / 1., 1. / 1.,
		-1. / 1., 1. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1. } }, { { 0. / 1.,
		0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1.,
		0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., -1. / 1., 1. / 1.,
		-1. / 1., 1. / 1. } }, { { 0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1.,
		0. / 1., 0. / 1., 1. / 1., -1. / 1., 1. / 1., -1. / 1., 0. / 1., 0.
				/ 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1. } },
		{ { 0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., -1.
				/ 1., 1. / 1., 1. / 1., -1. / 1., 1. / 1., 1. / 1., -1. / 1.,
				-1. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1. } }, { { 0. / 1.,
				0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1.,
				0. / 1., 0. / 1., 0. / 1., 1. / 1., -1. / 1., -1. / 1., 1. / 1.,
				-1. / 1., 1. / 1., 1. / 1., -1. / 1. } }, { { 0. / 1., 0. / 1.,
				0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., 1. / 1., 1. / 1.,
				-1. / 1., -1. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., -1.
						/ 1., -1. / 1., 1. / 1., 1. / 1. } } } };

const array<array<double, 19>, 19> MRTDHumieresD3Q19::inverse_trafo = {
		{ { { 1. / 19., -5. / 399., 1. / 21., -0. / 1., 0. / 1., 0. / 1., 0.
				/ 1., -0. / 1., 0. / 1., 0. / 1., 0. / 1., 0. / 1., -0. / 1., 0.
				/ 1., 0. / 1., 0. / 1., 0. / 1., -0. / 1., 0. / 1. } }, { { 1.
				/ 19., -11. / 2394., -1. / 63., 1. / 10., -1. / 10., -0. / 1.,
				0. / 1., -0. / 1., 0. / 1., 1. / 18., -1. / 18., -0. / 1., 0.
						/ 1., -0. / 1., 0. / 1., 0. / 1., -0. / 1., -0. / 1.,
				-0. / 1. } }, { { 1. / 19., -11. / 2394., -1. / 63., 0. / 1., 0.
				/ 1., 0. / 1., 0. / 1., 1. / 10., -1. / 10., -1. / 36., 1.
				/ 36., -1. / 12., 1. / 12., 0. / 1., -0. / 1., -0. / 1., 0.
				/ 1., 0. / 1., -0. / 1. } }, { { 1. / 19., -11. / 2394., -1.
				/ 63., -1. / 10., 1. / 10., 0. / 1., 0. / 1., 0. / 1., 0. / 1.,
				1. / 18., -1. / 18., -0. / 1., -0. / 1., 0. / 1., 0. / 1., -0.
						/ 1., 0. / 1., -0. / 1., 0. / 1. } }, { { 1. / 19., -11.
				/ 2394., -1. / 63., 0. / 1., 0. / 1., 0. / 1., 0. / 1., -1.
				/ 10., 1. / 10., -1. / 36., 1. / 36., -1. / 12., 1. / 12., 0.
				/ 1., -0. / 1., 0. / 1., 0. / 1., 0. / 1., -0. / 1. } },
				{ { 1. / 19., -11. / 2394., -1. / 63., 0. / 1., 0. / 1., -1.
						/ 10., 1. / 10., -0. / 1., 0. / 1., -1. / 36., 1. / 36.,
						1. / 12., -1. / 12., 0. / 1., 0. / 1., -0. / 1., 0.
								/ 1., 0. / 1., 0. / 1. } }, { { 1. / 19., -11.
						/ 2394., -1. / 63., -0. / 1., -0. / 1., 1. / 10., -1.
						/ 10., -0. / 1., 0. / 1., -1. / 36., 1. / 36., 1. / 12.,
						-1. / 12., -0. / 1., 0. / 1., 0. / 1., -0. / 1., -0.
								/ 1., 0. / 1. } }, { { 1. / 19., 4. / 1197., 1.
						/ 252., 1. / 10., 1. / 40., 0. / 1., 0. / 1., 1. / 10.,
						1. / 40., 1. / 36., 1. / 72., -1. / 12., -1. / 24., -0.
								/ 1., -0. / 1., 1. / 4., -1. / 8., 0. / 1., 1.
								/ 8. } },
				{ { 1. / 19., 4. / 1197., 1. / 252., -1. / 10., -1. / 40., 0.
						/ 1., 0. / 1., 1. / 10., 1. / 40., 1. / 36., 1. / 72.,
						-1. / 12., -1. / 24., 0. / 1., 0. / 1., -1. / 4., 1.
								/ 8., -0. / 1., 1. / 8. } }, { { 1. / 19., 4.
						/ 1197., 1. / 252., -1. / 10., -1. / 40., 0. / 1., 0.
						/ 1., -1. / 10., -1. / 40., 1. / 36., 1. / 72., -1.
						/ 12., -1. / 24., 0. / 1., -0. / 1., 1. / 4., 1. / 8.,
						-0. / 1., -1. / 8. } }, { { 1. / 19., 4. / 1197., 1.
						/ 252., 1. / 10., 1. / 40., -0. / 1., -0. / 1., -1.
						/ 10., -1. / 40., 1. / 36., 1. / 72., -1. / 12., -1.
						/ 24., -0. / 1., 0. / 1., -1. / 4., -1. / 8., 0. / 1.,
						-1. / 8. } }, { { 1. / 19., 4. / 1197., 1. / 252., 1.
						/ 10., 1. / 40., -1. / 10., -1. / 40., -0. / 1., -0.
						/ 1., 1. / 36., 1. / 72., 1. / 12., 1. / 24., -1. / 4.,
						-0. / 1., -0. / 1., 1. / 8., 1. / 8., -0. / 1. } }, { {
						1. / 19., 4. / 1197., 1. / 252., 1. / 10., 1. / 40., 1.
								/ 10., 1. / 40., 0. / 1., 0. / 1., 1. / 36., 1.
								/ 72., 1. / 12., 1. / 24., 1. / 4., 0. / 1., 0.
								/ 1., 1. / 8., -1. / 8., 0. / 1. } }, { { 1.
						/ 19., 4. / 1197., 1. / 252., -1. / 10., -1. / 40., 1.
						/ 10., 1. / 40., -0. / 1., -0. / 1., 1. / 36., 1. / 72.,
						1. / 12., 1. / 24., -1. / 4., -0. / 1., -0. / 1., -1.
								/ 8., -1. / 8., -0. / 1. } }, { { 1. / 19., 4.
						/ 1197., 1. / 252., -1. / 10., -1. / 40., -1. / 10., -1.
						/ 40., 0. / 1., 0. / 1., 1. / 36., 1. / 72., 1. / 12.,
						1. / 24., 1. / 4., 0. / 1., 0. / 1., -1. / 8., 1. / 8.,
						-0. / 1. } }, { { 1. / 19., 4. / 1197., 1. / 252., 0.
						/ 1., 0. / 1., -1. / 10., -1. / 40., 1. / 10., 1. / 40.,
						-1. / 18., -1. / 36., 0. / 1., 0. / 1., 0. / 1., -1.
								/ 4., -0. / 1., 0. / 1., -1. / 8., -1. / 8. } },
				{ { 1. / 19., 4. / 1197., 1. / 252., -0. / 1., -0. / 1., 1.
						/ 10., 1. / 40., 1. / 10., 1. / 40., -1. / 18., -1.
						/ 36., -0. / 1., -0. / 1., -0. / 1., 1. / 4., 0. / 1.,
						-0. / 1., 1. / 8., -1. / 8. } }, { { 1. / 19., 4.
						/ 1197., 1. / 252., -0. / 1., -0. / 1., 1. / 10., 1.
						/ 40., -1. / 10., -1. / 40., -1. / 18., -1. / 36., -0.
						/ 1., -0. / 1., -0. / 1., -1. / 4., 0. / 1., -0. / 1.,
						1. / 8., 1. / 8. } }, { { 1. / 19., 4. / 1197., 1.
						/ 252., 0. / 1., 0. / 1., -1. / 10., -1. / 40., -1.
						/ 10., -1. / 40., -1. / 18., -1. / 36., 0. / 1., 0.
						/ 1., 0. / 1., 1. / 4., -0. / 1., 0. / 1., -1. / 8., 1.
						/ 8. } } } };

// =====================================================================================
// ========================= FACTORY FUNCTIONS =========================================
// =====================================================================================

// ====================================Moment Trafo=====================================

template<size_t T_Q>
const array<array<double, T_Q>, T_Q> make_M(MomentBasis basis) {
	throw MRTException("This point in the code should have never been accessed."
			"There seems to be no MRT model implemented for your stencil.");
}

template<> const array<array<double, 9>, 9> make_M(MomentBasis basis) {
	switch (basis) {
	case DELLAR_D2Q9: {
		return MRTDellarD2Q9::moment_trafo;
		break;
	}
	case LALLEMAND_D2Q9: {
		return MRTLallemandD2Q9::moment_trafo;
		break;
	}
	default: {
		throw MRTException("MRT basis not defined for Q=9");
	}
	}
}
template<> const array<array<double, 19>, 19> make_M(MomentBasis basis) {
	switch (basis) {
	case DHUMIERES_D3Q19: {
		return MRTDHumieresD3Q19::moment_trafo;
		break;
	}
	default: {
		throw MRTException("MRT basis not defined for Q=19");
	}
	}
}

// ====================================Inverse Trafo ===================================

template<size_t T_Q>
const array<array<double, T_Q>, T_Q> make_T(MomentBasis basis) {
	throw MRTException("This point in the code should have never been accessed."
			"There seems to be no MRT model implemented for your stencil.");
}

template<> const array<array<double, 9>, 9> make_T(MomentBasis basis) {
	switch (basis) {
	case DELLAR_D2Q9: {
		return MRTDellarD2Q9::inverse_trafo;
		break;
	}
	case LALLEMAND_D2Q9: {
		return MRTLallemandD2Q9::inverse_trafo;
		break;
	}
	default: {
		throw MRTException("MRT basis not defined for Q=9");
	}
	}
}
template<> const array<array<double, 19>, 19> make_T(MomentBasis basis) {
	switch (basis) {
	case DHUMIERES_D3Q19: {
		return MRTDHumieresD3Q19::inverse_trafo;
		break;
	}
	default: {
		throw MRTException("MRT basis not defined for Q=19");
	}
	}
}

// ================================Diagonal Relaxation Matrix===========================

template<size_t T_Q>
const array<double, T_Q> make_diag(double tau, MomentBasis basis,
		RelaxMode relax_mode) {
	throw MRTException("This point in the code should have never been accessed."
			"There seems to be no MRT model implemented for your stencil.");
}

template<> const array<double, 9> make_diag(double tau, MomentBasis basis,
		RelaxMode relax_mode) {

	// firstly, relax all with tau
	array<double, 9> diag = { };
	for (size_t i = 0; i < 9; i++) {
		diag[i] = 1. / tau;
	}

	switch (relax_mode) {

	// full relaxation of higher-order moments
	case RELAX_FULL: {
		switch (basis) {
		case DELLAR_D2Q9: {
			diag.at(6) = 1.0;
			diag.at(7) = 1.0;
			diag.at(8) = 1.0;
			break;
		} /* case DELLAR_D2Q9 */
		case LALLEMAND_D2Q9: {
			diag.at(6) = 1.0;
			diag.at(7) = 1.0;
			diag.at(8) = 1.0;
			break;
		} /* case LALLEMAND_D2Q9 */
		default: {
			throw MRTException(
					"MRT relaxation not defined. Only RELAX_FULL or DELLAR_RELAX_ONLY_N are supported here.");
		} /* default */
		} /* switch basis */
		break;
	} /* case RELAX_FULL */

		// Dellar relax only moment 'N'
	case DELLAR_RELAX_ONLY_N: {
		assert(basis == DELLAR_D2Q9);
		diag.at(8) = 1.0;
		break;
	} /* case DELLAR_RELAX_FULL */

	default: {
		throw MRTException(
				"MRT relaxation not defined. DELLAR_RELAX_ONLY_N is only supported for DELLAR_D2Q9 Moment basis.");
	} /* default */
	} /* switch relax mode */
	return diag;
} /* make_diag */

template<> const array<double, 19> make_diag(double tau, MomentBasis basis,
		RelaxMode relax_mode) {

	assert(tau > 0.5);

	// firstly, relax all with tau
	array<double, 19> diag = { };
	for (size_t i = 0; i < 19; i++) {
		diag[i] = 1. / tau;
	}
	switch (relax_mode) {

	// full relaxation of higher-order moments
	case RELAX_FULL: {
		switch (basis) {
		case DHUMIERES_D3Q19: {
			diag.at(4) = 1.0;
			diag.at(6) = 1.0;
			diag.at(8) = 1.0;
			diag.at(10) = 1.0;
			diag.at(12) = 1.0;
			diag.at(2) = 1.0;
			diag.at(16) = 1.0;
			diag.at(17) = 1.0;
			diag.at(18) = 1.0;
			break;
		} /* case DHUMIERES_D3Q19 */
		default: {
			throw MRTException(
					"MRT relaxation not defined. NATriuM currently only supports the Basis from D'Humieres et al. (2002) in D3Q19.");

		} /* default */
		} /* switch basis */
		break;
	} /* case RELAX_FULL */

		// full relaxation of higher-order moments
	case RELAX_DHUMIERES_PAPER: {
		switch (basis) {
		case DHUMIERES_D3Q19: {
			double s9 = 1. / tau;
			double s13 = 1. / tau;
			double s1 = 1.19;
			double s2 = 1.4;
			double s10 = 1.4;
			double s4 = 1.2;
			double s16 = 1.98;
			diag = {0, s1, s2, 0, s4, 0, s4, 0, s4, s9, s10, s9, s10, s13, s13, s13, s16, s16, s16};
			break;
		} /* case DHUMIERES_D3Q19 */
		default: {
			throw MRTException(
					"MRT relaxation not defined. NATriuM currently only supports the Basis from D'Humieres et al. (2002) in D3Q19.");
		} /* default */
		} /* switch basis */
		break;
	} /* case RELAX_FULL */

	default: {
		throw MRTException(
				"MRT relaxation not defined. The relaxation scheme is not defined for the DHUMIERES_D3Q19 basis.");
	} /* default */
	} /* switch relax mode */
	return diag;
}

} /* namespace AuxiliaryMRTFunctions */
} /* namespace natrium */
